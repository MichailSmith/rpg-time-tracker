// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Node interface {
	IsNode()
}

type NewTime struct {
	ID           string `json:"id"`
	UserID       string `json:"user_id"`
	CampaignName string `json:"campaign_name"`
	ElapsedTime  int    `json:"elapsed_time"`
}

type NewUser struct {
	ID       string `json:"id"`
	Username string `json:"username"`
	Password string `json:"password"`
	Email    string `json:"email"`
	IsGm     bool   `json:"is_gm"`
}

type PageInfo struct {
	HasNextPage     bool    `json:"hasNextPage"`
	HasPreviousPage bool    `json:"hasPreviousPage"`
	StartCursor     *string `json:"startCursor"`
	EndCursor       *string `json:"endCursor"`
}

type Time struct {
	ID           string `json:"id"`
	UserID       string `json:"user_id"`
	CampaignName string `json:"campaign_name"`
	ElapsedTime  int    `json:"elapsed_time"`
}

type User struct {
	ID       string `json:"id"`
	Username string `json:"username"`
	Password string `json:"password"`
	Email    string `json:"email"`
	IsGm     bool   `json:"is_gm"`
}

type Role string

const (
	RoleGm     Role = "GM"
	RolePlayer Role = "PLAYER"
)

var AllRole = []Role{
	RoleGm,
	RolePlayer,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleGm, RolePlayer:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
